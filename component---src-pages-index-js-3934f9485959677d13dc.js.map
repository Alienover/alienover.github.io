{"version":3,"sources":["webpack:///./src/components/List/index.js","webpack:///./src/pages/index.js"],"names":["ListSeperator","children","css","rhythm","name","size","ListItem","title","date","to","ListContainer","data","yearIndex","yearMap","node","year","frontmatter","includes","id","push","map","Fragment","key","fields","slug","edges","allMarkdownRemark","shortTitle","site","siteMetadata","Layout","Helmet","query"],"mappings":"2TASMA,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACpB,kBACEC,IAAG,GAMH,oBACEA,IAAKA,YAAF,wCAGeC,YAAO,KAHtB,MAMH,YAAC,IAAD,CAAMC,KAAK,MAAMC,KAAK,QAEvBJ,IAICK,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,GAAhB,OACf,sBACE,oBACEP,IAAKA,YAAF,2BAEeC,YAAO,GAFtB,MAKFK,GAEH,YAAC,IAAD,CAAMC,GAAIA,GACR,wBAAOF,MA0DEG,EAtCO,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KACjBC,EAAY,GACZC,EAAU,GAChB,EAAqBF,EAArB,wDAA2B,CAAC,IAAD,oFAAhBG,EAAgB,EAAhBA,KACDC,EAASD,EAAKE,YAAdD,KACR,GAAMA,EAAM,CACV,GAAIH,EAAUK,SAASF,GAAO,SAE5BF,EAAQC,EAAKI,IAAMH,EACnBH,EAAUO,KAAKJ,IAIrB,OACE,kBACEb,IAAKA,YAAF,kCAGWC,YAAO,KAHlB,SAOFQ,EAAKS,KAAI,gBAAGN,EAAH,EAAGA,KAAH,OACR,YAAC,IAAMO,SAAP,CAAgBC,IAAKR,EAAKI,IACvBJ,EAAKI,MAAML,GACV,YAAC,EAAD,KAAgBA,EAAQC,EAAKI,KAE/B,YAAC,EAAD,CACET,GAAIK,EAAKS,OAAOC,KAChBhB,KAAMM,EAAKE,YAAYR,KACvBD,MAAOO,EAAKE,YAAYT,cC1FpC,sCAkCe,sBAAsB,IAAnBI,EAAkB,EAAlBA,KACRc,EAAUd,EAAKe,kBAAfD,MACAE,EAAehB,EAAKiB,KAAKC,aAAzBF,WAER,OACE,YAACG,EAAA,EAAD,KACE,YAACC,EAAA,OAAD,KACE,yBAAQJ,IAEV,kBACEzB,IAAKA,YAAF,UACSC,YAAO,GADhB,QADL,WAOA,YAAC,EAAD,CAAUQ,KAAMc,MAhBP,IAqBFO,EAAK","file":"component---src-pages-index-js-3934f9485959677d13dc.js","sourcesContent":["// @flow\nimport React from 'react'\nimport { Link } from 'gatsby'\nimport { css } from '@emotion/core'\n\nimport Icon from '../MaterialIcon'\n\nimport { rhythm } from '../../utils/typography'\n\nconst ListSeperator = ({ children }) => (\n  <li\n    css={css`\n      display: flex;\n      align-items: center;\n      font-weight: bold;\n    `}\n  >\n    <span\n      css={css`\n        color: #999;\n        display: flex;\n        margin-right: ${rhythm(1 / 4)};\n      `}\n    >\n      <Icon name=\"tag\" size=\"sm\" />\n    </span>\n    {children}\n  </li>\n)\n\nconst ListItem = ({ title, date, to }) => (\n  <li>\n    <span\n      css={css`\n        color: #999;\n        margin-right: ${rhythm(1)};\n      `}\n    >\n      {date}\n    </span>\n    <Link to={to}>\n      <span>{title}</span>\n    </Link>\n  </li>\n)\n\ntype Props = {\n  data: $ReadOnlyArray<{\n    node: {\n      id: string,\n      frontmatter: {\n        title: string,\n        date: string,\n        year: string,\n      },\n      fields: {\n        slug: string,\n      },\n    },\n  }>,\n}\nconst ListContainer = ({ data }: Props) => {\n  const yearIndex = []\n  const yearMap = {}\n  for (let { node } of data) {\n    const { year } = node.frontmatter\n    if (!!year) {\n      if (yearIndex.includes(year)) continue\n      else {\n        yearMap[node.id] = year\n        yearIndex.push(year)\n      }\n    }\n  }\n  return (\n    <ul\n      css={css`\n        font-size: 0.95rem;\n        && li {\n          margin: ${rhythm(1 / 4)} 0;\n        }\n      `}\n    >\n      {data.map(({ node }) => (\n        <React.Fragment key={node.id}>\n          {node.id in yearMap && (\n            <ListSeperator>{yearMap[node.id]}</ListSeperator>\n          )}\n          <ListItem\n            to={node.fields.slug}\n            date={node.frontmatter.date}\n            title={node.frontmatter.title}\n          />\n        </React.Fragment>\n      ))}\n    </ul>\n  )\n}\n\nexport default ListContainer\n","// @flow\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport { css } from '@emotion/core'\nimport { rhythm } from '../utils/typography'\n\nimport Layout from '../components/Layout'\nimport PostList from '../components/List'\n\ntype Props = {\n  data: {\n    site: {\n      siteMetadata: {\n        shortTitle: string,\n      },\n    },\n    allMarkdownRemark: {\n      totalCount: number,\n      edges: $ReadOnlyArray<{\n        node: {\n          id: string,\n          frontmatter: {\n            title: string,\n            date: string,\n            year: string,\n          },\n          fields: {\n            slug: string,\n          },\n        },\n      }>,\n    },\n  },\n}\nexport default ({ data }: Props) => {\n  const { edges } = data.allMarkdownRemark\n  const { shortTitle } = data.site.siteMetadata\n\n  return (\n    <Layout>\n      <Helmet>\n        <title>{shortTitle}</title>\n      </Helmet>\n      <h4\n        css={css`\n          margin: ${rhythm(1)} 0;\n        `}\n      >\n        Archive\n      </h4>\n      <PostList data={edges} />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        shortTitle\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n            year: date(formatString: \"YYYY\")\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}